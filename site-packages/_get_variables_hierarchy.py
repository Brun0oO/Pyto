from types import ModuleType as Module
import sys
import rubicon.objc
import warnings

__inspected_times__ = {}

__recursion_limit__ = 30

__recursion__ = 0

def get_variables_hierarchy(object):
    
    warnings.warn("Deprecated", DeprecationWarning)
    
    return
    
    global __inspected_times__
    
    vars = {}
    
    global __recursion__
    __recursion__ = 0
    
    def represent(value_):
        
        global __recursion__
        
        value = value_
        
        if isinstance(value, Module):
            value = value.__dict__
                
        try:
            repr_value = repr(value)
            __inspected_times__[repr_value] = __inspected_times__.get(repr_value, 0) + 1
            if __inspected_times__[repr_value] > 5:
                return repr_value
        except:
            return "Unable to get description"
        
        if isinstance(value, list):
            dictionnary = {}
            for i, value_ in enumerate(value):
                
                __recursion__ += 1
                if __recursion__ > __recursion_limit__:
                    break
                
                if isinstance(value_, (rubicon.objc.api.ObjCClass, rubicon.objc.api.ObjCInstance)):
                    dictionnary[str(i)] = value
                elif isinstance(value_, (dict, list)):
                    dictionnary[str(i)] = represent(value_.copy())
                else:
                    dictionnary[str(i)] = repr(value_)
            return dictionnary
                
        elif type(value) is dict:
            
            dictionnary = {}
            for key_, value_ in value.items():
                __recursion__ += 1
                if __recursion__ > __recursion_limit__:
                    break
                if isinstance(value_, (rubicon.objc.api.ObjCClass, rubicon.objc.api.ObjCInstance)):
                    dictionnary[str(key_)] = value_
                elif isinstance(value_, (dict, list)):
                    dictionnary[str(key_)] = represent(value_.copy())
                else:
                    dictionnary[str(key_)] = repr(value_)
            return dictionnary
        elif isinstance(value, (rubicon.objc.api.ObjCClass, rubicon.objc.api.ObjCInstance)):
            return value
        elif isinstance(value, str) and not value.startswith("'") and not value.endswith("'"):
            return "'"+value+"'"
        else:
            return repr(value)
    
    if isinstance(object, dict):
        module = Module("__inspected__")
        for (key, value) in object.items():
            module.__dict__[key] = value
        object = module

    for key in dir(object):
        vars[key] = represent(getattr(object, key))

    __inspected_times__ = {}
    
    return vars
