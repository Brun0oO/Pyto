# -*- coding: utf-8 -*-
"""
This module gives access to the console.
"""

if __host__ is not widget:
    from rubicon.objc import *
    from code import interact
    import importlib.util
    from importlib import reload
    import builtins
    import pdb

from pyto import *
from pyto import __isMainApp__
import os
import sys
import traceback
import threading
import time

def __runREPL__():
    
    if __host__ is widget:
        return
    
    sys.argv = ['']
        
    Python.shared.isScriptRunning = True

    interact()

# MARK: - Running

if __host__ is not widget:

    __script__ = None

    __is_loop_running__ = False

    __i__ = 0

    __breakpoints__ = []

    __are_breakpoints_set__ = True

    def run_script(path, replMode=False, debug=False, breakpoints=[]):
        """
        Run the script at given path catching exceptions.
    
        This function should only be used internally by Pyto.
    
        Args:
            path: The path of the script.
            replMode: If set to `True`, errors will not be handled.
            debug: Set to `True` for debugging.
            breakpoints: Lines to break if debugging.
        """
        
        try:
            del sys.modules["pyto_ui"]
        except KeyError:
            pass
        
        try:
            del sys.modules["ui_constants"]
        except KeyError:
            pass
        
        try:
            del sys.modules["_values"]
        except KeyError:
            pass
        
        python = Python.shared
        python.addScriptToList(path)
       
        currentDir = ""
        try:
            currentDir = str(python.currentWorkingDirectory)
        except:
            currentDir = os.path.expanduser(os.path.dirname(path))
       
        os.environ = {}
        for (key, value) in python.environment.items():
            os.environ[str(key)] = str(value)
        
        sys.argv = [path]
        for arg in python.args:
            if arg != "":
                sys.argv.append(str(arg))

        d=os.path.expanduser("~/tmp")
        filesToRemove = []
        try:
            filesToRemove = [os.path.join(d,f) for f in os.listdir(d)]
        except:
            pass
        for f in filesToRemove:
        
            if f.endswith(".repl.py"):
                continue
            
            try:
                os.remove(f)
            except PermissionError:
                pass

        def run() -> None:
        
            pip_directory = os.path.expanduser("~/Documents/modules")
            Python.shared.isScriptRunning = True
            os.chdir(currentDir)
            try:
                sys.path.remove(pip_directory)
            except:
                pass
            sys.path.insert(-1, currentDir)
            sys.path.insert(-1, pip_directory)
        
            try:
                global __script__
                spec = importlib.util.spec_from_file_location("__main__", path)
                __script__ = importlib.util.module_from_spec(spec)

                if debug and __host__ is not widget:
                
                    try:
                        console
                    except:
                        import console
                
                    console.__are_breakpoints_set__ = False
                    console.__breakpoints__ = breakpoints
                
                    console.__i__ = -1

                    old_input = input
                
                    def debugger_input(prompt):
                    
                        try:
                            console
                        except:
                            import console
                    
                        if not console.__are_breakpoints_set__:
                    
                            breakpoints = console.__breakpoints__
                            console.__i__ += 1
                    
                            if len(breakpoints) < console.__i__:
                                console.__are_breakpoints_set__ = True
                                return ""
                    
                            try:
                                breakpoints[console.__i__+1]
                            except:
                                console.__are_breakpoints_set__ = True
                    
                            return "b "+str(breakpoints[console.__i__])
                        else:
                            console.__should_inspect__ = True
                            return old_input(prompt)
                
                    if len(breakpoints) > 0:
                        builtins.input = debugger_input
                
                    pdb.main(["pdb", path])
                    builtins.input = old_input
                else:
                    spec.loader.exec_module(__script__)
            except SystemExit:
                pass
            except KeyboardInterrupt:
                pass
            except Exception as e:
            
                if not __isMainApp__() or replMode:
                    print(traceback.format_exc())
                    if not replMode:
                        Python.shared.fatalError(traceback.format_exc())
                else:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
            
                    extracts = traceback.extract_tb(sys.exc_info()[2])
                    count = len(extracts)
            
                    lineNumber = -1
            
                    fileName = path
                    for i, extract in enumerate(extracts):
                        if extract[0] == fileName:
                            lineNumber = extract[1]
                            break
                        count -= 1
            
                    if (type(e) == SyntaxError): # The last word in a `SyntaxError` exception is the line number
                        lineNumber = [int(s) for s in (str(e)[:-1]).split() if s.isdigit()][-1]

                    Python.shared.errorType = exc_type.__name__
                    Python.shared.errorReason = str(e)
                    for console in ConsoleViewController.visibles:
                        if console.editorSplitViewController.editor.document.fileURL.path != path:
                            continue
                        console.editorSplitViewController.editor.showErrorAtLine(lineNumber)

                    error = traceback.format_exc(limit=-count)

                    try:
                        PyOutputHelper.printError(error, script=threading.current_thread().script_path)
                    except:
                        PyOutputHelper.printError(error, script=None)
                    sys.path.remove(currentDir)

                    if debug:
                        pdb.post_mortem(exc_tb)

            if __isMainApp__():
            
                EditorViewController.runningLine = 0
            
                ConsoleViewController.enableDoneButton()
            
                ReviewHelper.shared.launches = ReviewHelper.shared.launches+1
                ReviewHelper.shared.requestReview()

        Python.shared.isScriptRunning = True
        Python.shared._isScriptRunning = True
    
        run()

        Python.shared._isScriptRunning = False
        Python.shared.isScriptRunning = False
        Python.shared.removeScriptFromList(path)
        
        sys.path = list(dict.fromkeys(sys.path))

        time.sleep(0.2)

        return __script__

# MARK: - I/O

ignoredThreads = []
"""
All output and input request from these threads will be ignored.
"""

def clear():
    """
    Clears the console.
    """
    
    if threading.current_thread() in ignoredThreads:
        return
    
    try:
        ConsoleViewController.clearConsoleForPath(threading.current_thread().script_path)
    except:
        try:
            ConsoleViewController.clearConsoleForPath(None)
        except:
            ConsoleViewController.visible.clear()

    time.sleep(0.1)

__PyInputHelper__ = PyInputHelper

def input(prompt=""):
    """
    Requests input with given prompt.
        
    Args:
        prompt: Text printed before the user's input without a newline.
    """
    
    if __host__ is widget:
        return None

    __PyInputHelper__.userInput = None
    
    try:
        __PyInputHelper__.showAlertWithPrompt(prompt, script=threading.current_thread().script_path)
    except:
         __PyInputHelper__.showAlertWithPrompt(prompt, script=None)
    
    while __PyInputHelper__.userInput == None or threading.currentThread() in ignoredThreads:
        time.sleep(0.2)
    
    userInput = __PyInputHelper__.userInput
    __PyInputHelper__.userInput = None
    
    return str(userInput)

def print(*objects, sep=None, end=None):
    """
    Prints to the Pyto console, not to the stdout. Works as the builtin `print` function but does not support printing to a custom file. Pyto catches by default the stdout and the stderr, so use the builtin function instead. This function is mainly for internal use.
    """
    
    if sep is None:
        sep = ' '
    if end is None:
        end = '\n'
    array = map(str, objects)

    printed = sep.join(array)+end
    try:
        if objects[0].__class__ is str:
            printed = objects[0]
    except:
        pass

    try:
        PyOutputHelper.print(printed, script=threading.current_thread().script_path)
    except:
        PyOutputHelper.print(printed, script=None)

# MARK: - Alerts

if __host__ is not widget:

    PyAlert = PyAlert
    """
    A class representing an alert.

    Example:

        alert = console.Alert.alertWithTitle("Hello", message="Hello World!")
        alert.addAction("Ok")
        alert.addCancelAction("Cancel")
        if (alert.show() == "Ok"):
            print("Good Bye!")
    """

    class Alert:
        """
        A wrapper of `PyAlert` Objective-C class on iOS and `NSAlert` on macOS that represents an UI alert.
        """
        
        pyAlert = None
        """
        The Objective-C representation.
        """
        
        def __init__(self):
            self.pyAlert = PyAlert.alloc().init()
        
        @staticmethod
        def alertWithTitle(title, message):
            """
            Creates an alert.
            
            Args:
                title: The title of the alert.
                message: The message of the alert.
            """
            
            alert = Alert()
            alert.pyAlert.title = title
            alert.pyAlert.message = message
            return alert
        
        __actions__ = []

        def addAction(self, title):
            """
            Add an action with given title.
            
            Args:
                title: The title of the action.
            """

            self.pyAlert.addAction(title)
        
        def addDestructiveAction(self, title):
            """
            Add a destructive action with given title.
            
            Args:
                title: The title of the action.
            """

            self.pyAlert.addDestructiveAction(title)

        def addCancelAction(self, title):
            """
            Add a cancel action with given title. Can only added once.
            
            Args:
                title: The title of the action.
            """
            
            if not self.pyAlert.addCancelAction(title):
                raise ValueError("There is already a cancel action.")
        
        def show(self):
            """
            Shows alert.
            
            Returns the title of the selected action.
            """
            
            return self.pyAlert._show()

else:
    PyAlert = None
    Alert = None

__all__ = ["Alert", "clear", "print", "input"]
